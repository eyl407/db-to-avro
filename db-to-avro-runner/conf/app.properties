#
# Copyright 2019 The Board of Trustees of The Leland Stanford Junior University.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

# Application defaults, can be overridden by a job
#
# Note ${UUID} is substituted everywhere with the same random UUID at startup time

# Docker host for managing containers
docker.host=unix:///var/run/docker.sock

# Should be at least 1.5 * cores
database.pool.size=64

# MS SQL Server defaults
sqlserver.database.url=jdbc:sqlserver://localhost;user=SA;password=${UUID};database=master;autoCommit=false
sqlserver.database.user=SA
sqlserver.database.password=${UUID}
sqlserver.image=mcr.microsoft.com/mssql/server:2017-latest
sqlserver.env=ACCEPT_EULA=Y,SA_PASSWORD=${UUID}

# Oracle defaults
oracle.database.user=system
oracle.database.password=${UUID}
oracle.image=oracle/database:12.2.0.1-ee

# Target size for generated Avro files, based on *uncompressed* source table bytes.
# Set to zero for unlimited file size.
#avro.targetsize=100000000
avro.targetsize=100000000
avro.fetchsize=100000
avro.filename=%{CATALOG}.%{SCHEMA}.%{TABLE}-%{PART}.avro
avro.logfile=job.json
avro.codec=snappy

# Core-count multiplier determines number of avro threads
avro.core.multiplier=0.75

# single thread = 116 100,000 fetch size, snappy
# single thread = 100, 100,000 fetch, null

# got 135 fetchsize 10000, target 50M,  1.5 cores
# got 143 fetchsize 1000, target 50M, 1.5 cores
# got 207 fetchsize 5000, target 25M, 1.5 cores
# got 195 fetchsize 5000, target 25M, 2 cores
# got 183 fetchsize 5000, target 25M, .5 cores
# got 114(!) fetchsize 50000, target 100M, .75 cores
# got 125 1.0 cores
# got 112 fetchsize 100,000 target 100M, .75 cores, snappy codec
# got 115 fetchsize 100,000 target 100M, .75 cores, null codec
# got 117 fetchsize 100,000 target 100M, 2.0X cores, null codec
# got 150 fetchsize 100,000 target 500M, 2.0 cores, null codec

# Going to use this for production:
# 111s: target=100M, fetch=100k, codec=snappy, .75 cores
